#include <stdio.h> 
#include <stdlib.h> 

struct Node { 
	int data; 
	struct Node* next; 
	struct Node* prev; 
}; 

void pushF(struct Node** head_ref,struct Node** end_ref, int new_data) 
{ 
	struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); 

	new_node->data = new_data; 
    if(head_ref==NULL)
     (*end_ref)=new_node;
	new_node->next = (*head_ref); 
	new_node->prev = NULL; 

	if ((*head_ref) != NULL) 
		(*head_ref)->prev = new_node; 

	(*head_ref) = new_node; 
} 

void pushE(struct Node** head_ref,struct Node** end_ref, int new_data) 
{ 
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); 
    struct Node* last = *head_ref;
    new_node->data = new_data; 
    new_node->next = NULL; 
    if (*head_ref == NULL) 
    { 
        new_node->prev = NULL; 
        *head_ref = new_node; 
        return; 
    } 
    while (last->next != NULL) 
        last = last->next; 
        
    last->next = new_node;
    new_node->prev = last;
    (*end_ref)=new_node;
    return;
} 

void printList(struct Node* node) 
{ 
    struct Node* last; 
    printf("\nTraversal in forward direction \n"); 
    while (node != NULL) { 
        printf(" %d ", node->data); 
        last = node; 
        node = node->next; 
    } 
  
    printf("\nTraversal in reverse direction \n"); 
    while (last != NULL) { 
        printf(" %d ", last->data); 
        last = last->prev; 
    } 
    return;
} 

void insertAfter(struct Node* prev_node,int pos, int new_data) 
{ 
    int x=1;
    if (prev_node == NULL) { 
        printf("Element cannot be inserted"); 
        return; 
    } 
    while(x!=pos)
    {
        prev_node=prev_node->next;
        x++;
    }
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); 
    new_node->data = new_data; 
    new_node->next = prev_node->next; 
    prev_node->next = new_node; 
    new_node->prev = prev_node; 
    if (new_node->next != NULL) 
        new_node->next->prev = new_node;
    return;    
} 

void delete(struct Node* prev_node,struct Node** head_ref,struct Node** end_ref,int pos) 
{ 
    int x=1;
    if (prev_node == NULL) { 
        printf("Element cannot be deleted"); 
        return; 
    } 
    while(x!=pos)
    {
        prev_node=prev_node->next;
        x++;
    }
    if(prev_node->next==NULL)
     (*end_ref)=prev_node->prev;
    if(prev_node->prev==NULL)
     (*head_ref)=prev_node->next;
    struct Node* new_node = prev_node;
    prev_node->next->prev=prev_node->prev;
    prev_node->prev->next=prev_node->next;
    printf("\n Element deleted : %d",prev_node->data);
    free(new_node);
    return;    
} 
void reverse(struct Node* head_ref,struct Node* end_ref)
{
    struct Node *t1=head_ref,*t2=end_ref;
    while(t1!=t2 && t1->prev!=t2)
    {
        int temp=t1->data;
        t1->data=t2->data;
        t2->data=temp;
        t1=t1->next;
        t2=t2->prev;
    }
}
/* Driver program to test above functions*/
int main() 
{ 
	int n,ch,posi;
	struct Node *head = NULL, *end =NULL; 
	while(1)
	{
	printf("\n1. Insert at beginning");
	printf("\n2. Insert at end");
	printf("\n3. Insert at any position");
	printf("\n4. Delete any position");
	printf("\n5. Reverse the DLL");
	printf("\n6. Display the DLL");
	printf("\nEnter your choice :");
	scanf("%d",&ch);
	switch(ch)
	{
	    case 1:
	    printf("\nEnter the element to be entered");
	    scanf("%d",&n);
	    pushF(&head,&end, n);
	    break;
	    case 2:
	    printf("\nEnter the element to be entered");
	    scanf("%d",&n);
	    pushE(&head,&end, n);
	    break;
	    case 3:
	    printf("\nEnter the element to be entered");
	    scanf("%d",&n);
	    printf("\n Enter the position to be insterted at :");
	    scanf("%d",&posi);
	    insertAfter(head,posi,n);
	    break;
	    case 4:
	    printf("\n Enter the position to be deleted at :");
	    scanf("%d",&posi);
	    delete(head,&head,&end,posi);
	    break;
	    case 5:
	    printf("\nBefore Reversal");
	    printList(head);
	    reverse(head,end);
	    printf("\nAfter Reversal");
	    printList(head);
	    break;
	    case 6:
	    printList(head);
	    break;
	    default:
	    exit(0);
	}
    }
	return 0; 
} 
